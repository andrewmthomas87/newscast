// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Job {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  type    String
  payload String

  status      String    @default("pending")
  startedAt   DateTime?
  completedAt DateTime?
}

model Broadcast {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  topics Topic[]
}

model Topic {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name  String
  query String

  json String

  broadcast    Broadcast      @relation(fields: [broadcastID], references: [id])
  broadcastID  Int
  articles     Article[]
  topicSummary TopicSummary?
  topicSegment TopicSegment?
}

model Article {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name        String
  url         String
  result      String
  data        String
  textContent String

  topic          Topic           @relation(fields: [topicID], references: [id])
  topicID        Int
  articleSummary ArticleSummary?
}

model TopicSummary {
  topic   Topic @relation(fields: [topicID], references: [id])
  topicID Int   @id

  model   String
  summary String
}

model ArticleSummary {
  article   Article @relation(fields: [articleID], references: [id])
  articleID Int     @id

  model   String
  summary String
}

model TopicSegment {
  topic Topic @relation(fields: [topicID], references: [id])
  topicID      Int @id

  model        String
  introduction String
  body         String
  conclusion   String

  prevTransition TopicTransition? @relation(name: "prev")
  nextTransition TopicTransition? @relation(name: "next")
}

model TopicTransition {

  prevTopic               TopicSegment @relation(name: "prev", fields: [prevTopicSegmentTopicID], references: [topicID])
  prevTopicSegmentTopicID Int          @unique
  nextTopic               TopicSegment @relation(name: "next", fields: [nextTopicSegmentTopicID], references: [topicID])
  nextTopicSegmentTopicID Int          @unique

  transition String

  @@id([prevTopicSegmentTopicID, nextTopicSegmentTopicID])
}

// model CombinedSegments {
//   topic combinedSegment @relation(fields: [topicID], references: [id])
//   topicID      Int @id

//   model        String
//   article      String
//   transitionId Int @id @default(autoincrement())
//   transition   String

// }
